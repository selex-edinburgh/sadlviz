[%  
   import "sadl.eol";
   import "nestedport.eol";


createPort();


var connections = Sequence{};



%]
<html>
<head>
    <link rel="stylesheet" href="css/sadl.css" />
    <script type="text/javascript" src="js/mxClient-min.js"></script>
    <script type="text/javascript" src="js/elk.bundled-min.js"></script>
    <script type="text/javascript" src="js/adlviz.js"></script>
    <title>[%=application.getFullNameStr()%]</title>
</head>
<body>
	<h1>
		[%=application.getFullNameStr()%]
	</h1>
	<div id="graphContainer" class="viewport">
    </div>
    <div id="viewport">
    </div>
    
    	<script type="text/javascript">
	        const elk = new ELK({
	            workerUrl: 'js/elk-worker-min.js'
	        });
	        
	        const elkGraph = 
	        {
	            "id": "root",
	            "layoutOptions": { "elk.algorithm": "layered" },
	            "children": [
[% for (container in application.containers) {
     

    var stack = Sequence{};
    var visited = Set{};
    //container.name.println("+add:");
    stack.add(0, container);
    var previousStackSize = stack.size;
    while(stack.size > 0) {
        var currentContainer = stack.get(0);
        
        if (visited.includes(currentContainer)){
%]                          ], "class":"Container" },
[%
            stack.removeAt(0);
            continue;
        }

		// add subcontainers 
		if (currentContainer.isTypeOf(M!sadl::Container)) {
	        var i = currentContainer.children.size - 1;
	        while(i >= 0) {
	            var child = currentContainer.children.get(i);
	            //child.name.println("+add:");
	            stack.add(0, child);
	            i = i - 1;
	        }
	        
	        // add instances in the container
	        i = currentContainer.instances.size - 1;
	        while(i >= 0) {
	            var child = currentContainer.instances.get(i);
	            //child.name.println("+add:");
	            stack.add(0, child);
	            i = i - 1;
	        }
	    }
        
        // do for current container
        if (currentContainer.isTypeOf(M!sadl::Container)) {
            
            // collect connections
            connections.addAll(currentContainer.connections);
%]
                            { "id": "[%=currentContainer.getFullNameStr()%]", 
                              "labels": [{"text": "[%=currentContainer.name%]"}],
                              "properties": {
                                "portConstraints": "FIXED_POS"
                              },
                              "children": [
[%
        }
        if (currentContainer.isTypeOf(M!sadl::Instance)) {
               var componentFullName = currentContainer.getFullNameStr();
%]
                            { "id": "[%=componentFullName%]", 
                              "labels": [{"text": "[%=currentContainer.name%]"}],
                              "properties": {
                                "portConstraints": "FIXED_POS"
                              },
                              "ports": [
[%
            var westDummyPort = createPort();
            var eastDummyPort = createPort();
            var portInOut = countPortInOut(connections);

            for (port in currentContainer.type.ports) {
%]

[%
                var level = 0;
                var rootPort = createPort();
                var rootPortName = componentFullName + "." + port.name;
                rootPort.set(ID(), rootPortName);
                rootPort.set(PORT(), port);
                
                if (portInOut.get(rootPortName) > 0) {
                    rootPort.set(PARENT_PORT(), westDummyPort); 
                    westDummyPort.get(CHILDREN()).add(rootPort);
                    westDummyPort.set(SIDE(), SIDE_WEST());
                    rootPort.set(SIDE(), SIDE_WEST());
                } else {
                    rootPort.set(PARENT_PORT(), eastDummyPort);
                    eastDummyPort.get(CHILDREN()).add(rootPort);
                }
                                    
                port.calculateSubPorts(rootPort, rootPort, level);
                var subPorts = Sequence{};
                treeToSequence(rootPort, subPorts); 
                
                for (subPort in subPorts){
                    var portFullName = subPort.get(ID());
%]
                                 { "id": "[%=(portFullName).replace("\\.","-")%]", 
                                   "labels": [{"text": "[%=subPort.get(TEXT())%]"}],
                                   "properties": {
                                     "port.side": "[%=subPort.get(SIDE())%]",
                                     "port.borderOffset": [%=subPort.get(LEVEL()) * DEFAULT_PORT_WIDTH()%]
                                   },
                                   "width": [%=subPort.get(WIDTH()) %], "height": [%=subPort.get(HEIGHT())%],
                                   "y": [%=subPort.get(Y()) %],
                                   "class": "Port"},
[%
                }
%]
[%
            }
            var dummyPort = eastDummyPort;
            var westChildren = westDummyPort.get(CHILDREN());
            var eastChildren = eastDummyPort.get(CHILDREN());
            var westY = 0;
            var eastY = 0;
            if (westChildren.size > 0) {
                var lastChild = westChildren.get(westChildren.size - 1);
                westY = lastChild.get(Y()) + lastChild.get(HEIGHT());
            }
            if (eastChildren.size > 0) {
                var lastChild = eastChildren.get(eastChildren.size - 1);
                eastY = lastChild.get(Y()) + lastChild.get(HEIGHT());
            }
            
            if (westY > eastY) {
                dummyPort = westDummyPort;
            } 
            var containerHeight = calcuateContainerHeight(dummyPort);
            if (containerHeight < DEFAULT_COMPONENT_HEIGHT() - DEFAULT_Y_OFFSET()) {
                containerHeight = DEFAULT_COMPONENT_HEIGHT();
            }
%]
                              ], "width": [%=currentContainer.getWidth()%], "height": [%=containerHeight%], "class":"Component" },
[%
        }

//        currentContainer.name.println("!process:");
        if (currentContainer.isTypeOf(M!sadl::Container)){
            visited.add(currentContainer);
        }

        //currentContainer.name.println("-rem:");
        if (currentContainer.isTypeOf(M!sadl::Container) and stack.indexOf(currentContainer) == 0) {
%]                          ], "width": 30, "height": 30, "class":"Application"},
[%
//            stack.println("A: ");
            stack.remove(currentContainer);
        } else if (currentContainer.isTypeOf(M!sadl::Instance)){
//            stack.println("B: ");
            stack.remove(currentContainer);
        } 
    }
   %]

[% } %]
	            ]
	            
	            ,
	            "edges": [
[%
// handle connections to edges
for (connection in connections) {
    //connection.to.println(connection.from + " : ");
//    connection.println;
    
%]
	             { 
	               "id": "[%=connection.getFullNameStr()%]", "label":"[%=connection.name%]", 
	               "sources": ["[%=(connection.from.getFullNameStr() + "." + connection.getSourceName()).replace("\\.","-") %]"],
	               "targets": ["[%=(connection.to.getFullNameStr() + "." + connection.getDestinationName()).replace("\\.","-")%]"]
	             },
[% } %]
	            ]
	          }
    </script>

    <!-- Render -->
    <script type="text/javascript">
        elk.layout(elkGraph)
            .then(function (g) {
                var viewport = document.getElementById("viewport");
                render(document.getElementById('graphContainer'), elkGraph);
                viewport.innerHTML = "<pre>" + JSON.stringify(g, null, " ") + "</pre>"
            })
            .catch(console.error);
    </script>
</body>

</html>