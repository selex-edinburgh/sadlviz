[% 
  import "sadl.eol";
  import "nestedport.eol";

  var connections = Sequence{};
%]
<html>
<head>
    <link rel="stylesheet" href="css/sadl.css" />
    <script type="text/javascript" src="js/mxClient-min.js"></script>
    <script type="text/javascript" src="js/elk.bundled-min.js"></script>
    <script type="text/javascript" src="js/adlviz.js"></script>
    <title>[%=application.getFullNameStr()%]</title>
</head>
<body>
    <h1>
        [%=application.getFullNameStr()%]
    </h1>
    <div id="graphContainer" class="viewport">
    </div>
    <div id="viewport">
    </div>
    
        <script type="text/javascript">
            const elk = new ELK({
                workerUrl: 'js/elk-worker-min.js'
            });
            
            const elkGraph = 
            {
                "id": "root",
                "layoutOptions": { "elk.algorithm": "layered" },
                "children": [
[% 
    for (subContainer in application.containerInstances) {
       var containerStack = Sequence{};
        var visited = Set{};
        var iteratorMap = Map{};
        
        var applicationNode = createNode();
        applicationNode.id = application.name;
        applicationNode.label = application.name;
        applicationNode.sadlContainer = application;
        applicationNode.level = -1;
        applicationNode.width = DEFAULT_COMPONENT_WIDTH();
        applicationNode.height = DEFAULT_COMPONENT_HEIGHT();
        applicationNode.class = application.eClass.getName(); 
        
        populateContainerStack(applicationNode, applicationNode, subContainer, 0, containerStack, connections);
        var portInOut = countPortInOut(connections);
        
        
        var prevNode = null;
        for (node in containerStack) {
%]
[%
            if (prevNode == null) {
%]
[% /* closing tags */ %]
                    // A
                    { "id": "[%=node.id%]", 
                        "labels": [{"text": "[%=node.label%]"}],
                        "properties": {
                            "portConstraints": "FIXED_POS"
                        },
[%
            }
            if (prevNode <> null and node.level > prevNode.level) {
%]
                    // B
                              "children": [
                    { "id": "[%=node.id%]", 
                        "labels": [{"text": "[%=node.label%]"}],
                        "properties": {
                            "portConstraints": "FIXED_POS"
                        },
[%
            }
            if (prevNode <> null and node.level == prevNode.level) {
%]
                    // C
                        "ports": [
[%              // handle ports here
                if (prevNode.sadlContainer.isTypeOf(ComponentInstance)) {
	                for (port in prevNode.sadlContainer.type.ports) {
	                    var subPorts = createSequencedPorts(prevNode, port, portInOut);
	                    for (subPort in subPorts){
                            var portFullName = subPort.id;
%]
	                         { "id": "[%=portFullName%]", 
	                           "labels": [{"text": "[%=subPort.label%]"}],
	                           "properties": {
	                             "port.side": "[%=subPort.side%]",
	                             "port.borderOffset": [%=subPort.level * DEFAULT_PORT_WIDTH()%]
	                           },
	                           "width": [%=subPort.width %], "height": [%=subPort.height %],
	                           "y": [%=subPort.y %],
	                           "class": "Port"},
	[%
                        }
	                }
                }
                var containerHeight = calculateContainerHeight(prevNode);
%]
                        ],
                        "width": [%=prevNode.width%], 
                        "height": [%=containerHeight%], 
                        "class":"[%=prevNode.class%]" 
                    },
                    { "id": "[%=node.id%]", 
                        "labels": [{"text": "[%=node.label%]"}],
                        "properties": {
                            "portConstraints": "FIXED_POS"
                        },
[%
            }
            if (prevNode <> null and node.level < prevNode.level) {
%]
                    // D
                        "ports": [
[%              // handle ports here
                if (prevNode.sadlContainer.isTypeOf(ComponentInstance)) {
                    for (port in prevNode.sadlContainer.type.ports) {
                        var subPorts = createSequencedPorts(prevNode, port, portInOut);
                        for (subPort in subPorts){
                            var portFullName = subPort.id;
%]
	                         { "id": "[%=portFullName %]", 
	                           "labels": [{"text": "[%=subPort.label%]"}],
	                           "properties": {
	                             "port.side": "[%=subPort.side%]",
	                             "port.borderOffset": [%=subPort.level * DEFAULT_PORT_WIDTH()%]
	                           },
	                           "width": [%=subPort.width %], "height": [%=subPort.height %],
	                           "y": [%=subPort.y %],
	                           "class": "Port"},
[%
                        }
                    }
                }
                var containerHeight = calculateContainerHeight(prevNode);
%]
                        ],
                        "width": [%=prevNode.width%], 
                        "height": [%=containerHeight%], 
                        "class":"[%=prevNode.class%]" 
                    },
[% for (i in Sequence{1..prevNode.level-node.level}) { %]
                    ],
                        "ports": [
[%              // handle ports here
                if (node.sadlContainer.isTypeOf(ComponentInstance)) {
                    for (port in node.sadlContainer.type.ports) {
                        var subPorts = createSequencedPorts(node, port, portInOut);
                        for (subPort in subPorts){
                            var portFullName = subPort.id;
%]
                         { "id": "[%=portFullName%]", 
                           "labels": [{"text": "[%=subPort.label%]"}],
                           "properties": {
                             "port.side": "[%=subPort.side%]",
                             "port.borderOffset": [%=subPort.level * DEFAULT_PORT_WIDTH()%]
                           },
                           "width": [%=subPort.width %], "height": [%=subPort.height %],
                           "y": [%=subPort.y %],
                           "class": "Port"},
[%
                        }
                    }
                }
                var containerHeight = calculateContainerHeight(node);
%]
                        ],
                        "width": [%=node.width%], 
                        "height": [%=containerHeight%], 
                        "class":"[%=node.class%]" 
                    },
[% } %]
                    { "id": "[%=node.id%]", 
                        "labels": [{"text": "[%=node.label%]"}],
                        "properties": {
                            "portConstraints": "FIXED_POS"
                        },
[%
            }
%]
[% /* closing tags */ %]
[%
            if (node == containerStack.get(containerStack.size - 1)) {
%]
                    // F
                        "ports": [
[%              // handle ports here
                if (node.sadlContainer.isTypeOf(ComponentInstance)) {
                    for (port in node.sadlContainer.type.ports) {
                        var subPorts = createSequencedPorts(node, port, portInOut);
                        for (subPort in subPorts){
                            var portFullName = subPort.id;
%]
                             { "id": "[%=(portFullName).replace("\\.","-")%]", 
                               "labels": [{"text": "[%=subPort.label%]"}],
                               "properties": {
                                 "port.side": "[%=subPort.side%]",
                                 "port.borderOffset": [%=subPort.level * DEFAULT_PORT_WIDTH()%]
                               },
                               "width": [%=subPort.width %], "height": [%=subPort.height %],
                               "y": [%=subPort.y %],
                               "class": "Port"},
[%
                        }
                    }
                }
                var containerHeight = calculateContainerHeight(node);
%]
                        ],
                        "width": [%=node.width%], 
                        "height": [%=containerHeight%], 
                        "class":"[%=node.class%]" 
                    },
[% 
var i = 0;
while(i < node.level) { %]
                    ],},
[% i++; } %]
[%
            }
%]
[%
            prevNode = node;
        } 


    }
%]
                ],
                "edges": [
[%
// handle the connection-to-edge transformation
for (connection in connections) {
%]
                 { 
                   "id": "[%=connection.id%]", "label":"[%=connection.sadlConnection.name%]", 
                   "sources": ["[%=(connection.source.id + "-" + connection.sadlConnection.getSourceName()) %]"],
                   "targets": ["[%=(connection.target.id + "-" + connection.sadlConnection.getDestinationName())%]"]
                 },
[% } %]
                ]
            }
    </script>

    <!-- Render -->
    <script type="text/javascript">
        elk.layout(elkGraph)
            .then(function (g) {
                var viewport = document.getElementById("viewport");
                render(document.getElementById('graphContainer'), elkGraph);
//                viewport.innerHTML = "<pre>" + JSON.stringify(g, null, " ") + "</pre>"
            })
            .catch(console.error);
    </script>
</body>

</html>

