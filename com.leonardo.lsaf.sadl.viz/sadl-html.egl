[% import "sadl.eol";

var connections = Sequence{};

%]
<html>
<head>
    <link rel="stylesheet" href="css/sadl.css" />
    <script type="text/javascript" src="js/mxClient-min.js"></script>
    <script type="text/javascript" src="js/elk.bundled-min.js"></script>
    <script type="text/javascript" src="js/adlviz.js"></script>
    <title>[%=application.getFullName()%]</title>
</head>
<body>
	<h1>
		[%=application.getFullNameStr()%]	
	</h1>
	<div id="graphContainer" class="viewport">
    </div>
    <div id="viewport">
    </div>
    
    	<script type="text/javascript">
	        const elk = new ELK({
	            workerUrl: 'js/elk-worker.js'
	        });
	        
	        const elkGraph = {
	            "id": "root",
	            "layoutOptions": { 'elk.algorithm': 'layered' },
	            "children": [
[% for (container in application.containers) {
     

    var stack = Sequence{};
    var visited = Set{};
    //container.name.println("+add:");
    stack.add(0, container);
    var previousStackSize = stack.size;
    while(stack.size > 0) {
        var currentContainer = stack.get(0);
        
        if (visited.includes(currentContainer)){
%]                          ], "width": 30, "height": 30 },
[%
            stack.removeAt(0);
            continue;
        }

        var i = currentContainer.children.size - 1;
        while(i >= 0) {
            var child = currentContainer.children.get(i);
            //child.name.println("+add:");
            stack.add(0, child);
            i = i - 1;
        }
        // do for current container
        if (currentContainer.isTypeOf(M!sadl::Container)) {
            // add this container's' connections to processed later with all other connections
            //currentContainer.connections.println;
            connections.addAll(currentContainer.connections); 
        
%]
                            { "id": "[%=currentContainer.getFullNameStr()%]", "label": "[%=currentContainer.name%]", 
[%                                
            // map instances to ports
%]
                              "ports": [
[%
        for (instance in currentContainer.instances) {   
%]
                                 { "id": "[%=instance.getFullNameStr()%]", "label": "[%=instance.name%]", "width": 5, "height": 5},
[%
        }
%]
                              ],
                            "children": [
[%
        }
        
          
                
        currentContainer.name.println("!process:");
        if (currentContainer.children.size > 0){
            visited.add(currentContainer);
        }

        //currentContainer.name.println("-rem:");
        if (currentContainer.children.size == 0) {
%]                          ], "width": 30, "height": 30 },
[% 
            stack.remove(currentContainer);
        }  
    }
   %]

[% } %]
	            ]
	            
	            ,
	            edges: [
[%
for (connection in connections) {
    connection.to.println(connection.from + " : ");
%]
	             { 
	               "id": "[%=connection.getFullNameStr()%]", "label":"[%=connection.name%]", 
	               "sources": ["[%=connection.from.getFullNameStr()%]"],"targets": ["[%=connection.to.getFullNameStr()%]"]
	             },
[% } %]
	            ]
	        }
    </script>

    <!-- Render -->
    <script type="text/javascript">
        elk.layout(elkGraph)
            .then(function (g) {
                var viewport = document.getElementById("viewport");
                render(document.getElementById('graphContainer'), elkGraph);
                viewport.innerHTML = "<pre>" + JSON.stringify(g, null, " ") + "</pre>"
            })
            .catch(console.error);
    </script>
</body>

</html>