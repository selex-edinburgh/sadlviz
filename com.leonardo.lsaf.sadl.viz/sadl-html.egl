[% import "sadl.eol";

var connections = Sequence{};

%]
<html>
<head>
    <link rel="stylesheet" href="css/sadl.css" />
    <script type="text/javascript" src="js/mxClient-min.js"></script>
    <script type="text/javascript" src="js/elk.bundled-min.js"></script>
    <script type="text/javascript" src="js/adlviz.js"></script>
    <title>[%=application.getFullName()%]</title>
</head>
<body>
	<h1>
		[%=application.getFullNameStr()%]	
	</h1>
	<div id="graphContainer" class="viewport">
    </div>
    <div id="viewport">
    </div>
    
    	<script type="text/javascript">
	        const elk = new ELK({
	            workerUrl: 'js/elk-worker.js'
	        });
	        
	        const elkGraph = {
	            "id": "root",
	            "layoutOptions": { "elk.algorithm": "layered" },
	            "children": [
[% for (container in application.containers) {
     

    var stack = Sequence{};
    var visited = Set{};
    //container.name.println("+add:");
    stack.add(0, container);
    var previousStackSize = stack.size;
    while(stack.size > 0) {
        var currentContainer = stack.get(0);
        
        if (visited.includes(currentContainer)){
%]                          ], "width": 30, "height": 30 },
[%
            stack.removeAt(0);
            continue;
        }

		// add subcontainers 
		if (currentContainer.isTypeOf(M!sadl::Container)) {
	        var i = currentContainer.children.size - 1;
	        while(i >= 0) {
	            var child = currentContainer.children.get(i);
	            //child.name.println("+add:");
	            stack.add(0, child);
	            i = i - 1;
	        }
	        
	        // add instances in the container
	        i = currentContainer.instances.size - 1;
	        while(i >= 0) {
	            var child = currentContainer.instances.get(i);
	            //child.name.println("+add:");
	            stack.add(0, child);
	            i = i - 1;
	        }
	    }
        
        // do for current container
        if (currentContainer.isTypeOf(M!sadl::Container)) {
            
            // collect connections
            connections.addAll(currentContainer.connections); 
%]
                            { "id": "[%=currentContainer.getFullNameStr()%]", "label": "[%=currentContainer.name%]", 
                              "children": [
[%
        }
        if (currentContainer.isTypeOf(M!sadl::Instance)) {
               var componentFullName = currentContainer.getFullNameStr();
%]
                            { "id": "[%=componentFullName%]", "label": "[%=currentContainer.name%]",
                              "ports": [
[%
            for (port in currentContainer.type.ports) {
%]
                                 { "id": "[%=(componentFullName + "." + port.name).replace("\\.","-")%]", "label": "[%=port.name%]", "width": 5, "height": 5},
[%
            }
%]
                              ], "width": 30, "height": 30, "info":"component" },
[%
        }

        currentContainer.name.println("!process:");
        if (currentContainer.isTypeOf(M!sadl::Container)){
            visited.add(currentContainer);
        }

        //currentContainer.name.println("-rem:");
        if (currentContainer.isTypeOf(M!sadl::Container) and stack.indexOf(currentContainer) == 0) {
%]                          ], "width": 30, "height": 30 },
[%
            stack.println("A: ");
            stack.remove(currentContainer);
        } else if (currentContainer.isTypeOf(M!sadl::Instance)){
//            stack.println("B: ");
            stack.remove(currentContainer);
        } 
    }
   %]

[% } %]
	            ]
	            
	            ,
	            "edges": [
[%
// handle connections to edges
for (connection in connections) {
    //connection.to.println(connection.from + " : ");
    connection.println;
    
%]
	             { 
	               "id": "[%=connection.getFullNameStr()%]", "label":"[%=connection.name%]", 
	               "sources": ["[%=(connection.from.getFullNameStr() + "." + connection.source[connection.source.size - 1].name).replace("\\.","-") %]"],
	               "targets": ["[%=(connection.to.getFullNameStr() + "." + connection.destination[connection.destination.size - 1].name).replace("\\.","-")%]"]
	             },
[% } %]
	            ]
	        }
    </script>

    <!-- Render -->
    <script type="text/javascript">
        elk.layout(elkGraph)
            .then(function (g) {
                var viewport = document.getElementById("viewport");
                render(document.getElementById('graphContainer'), elkGraph);
                viewport.innerHTML = "<pre>" + JSON.stringify(g, null, " ") + "</pre>"
            })
            .catch(console.error);
    </script>
</body>

</html>