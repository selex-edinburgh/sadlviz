operation addExtension(sequence: Sequence, extension: String) {
    sequence.add(0, extension);
    return sequence;
}

operation M!Application getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
//        else if (container.isTypeOf(M!Model)) {
//            segments.add(0, container.name);
//        } 
        container = container.eContainer;
    }
    return segments;
}

operation M!Container getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
        else if (container.isTypeOf(M!Application)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Container)) {
            segments.add(0, container.name);
        }  
        container = container.eContainer;
    }
    return segments;
}

operation M!Connection getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
        else if (container.isTypeOf(M!Application)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Container)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Connection)) {
            segments.add(0, container.name);
        }  
        container = container.eContainer;
    }
    return segments;
}

operation M!ContainerInstance getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
        else if (container.isTypeOf(M!Application)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!ContainerInstance)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Container)) {
            segments.add(0, container.name);
        }
        container = container.eContainer;
    }
    return segments;
}

operation M!ComponentInstance getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
        else if (container.isTypeOf(M!Application)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!ContainerInstance)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Container)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!ComponentInstance)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Component)) {
            segments.add(0, container.name);
        } 
        container = container.eContainer;
    }
    return segments;
}

operation M!Port getFullName() {
    var segments = Sequence{};
    segments.add(self.name);
    var container = self.eContainer;
    var jModel = null;
    while (container <> null) {
        if (container.isTypeOf(M!Package)) {
            segments.add(0, container.name);
        } 
        else if (container.isTypeOf(M!Application)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Container)) {
            segments.add(0, container.name);
        }
        else if (container.isTypeOf(M!Port)) {
            segments.add(0, container.name);
        }  
        container = container.eContainer;
    }
    return segments;
}

operation M!Application getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation M!Container getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation M!Connection getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation M!ContainerInstance getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation M!ComponentInstance getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation M!Port getFullNameStr() {
    var fullName = self.getFullName().concat(".");
    return fullName;
}

operation Connection getSourceName(): String{
    var names = Sequence{};
    for (port in self.source) {
        names.add(port.name);
    }
    return names.concat(".");
}

operation Connection getDestinationName(): String{
    var names = Sequence{};
    for (port in self.destination) {
        names.add(port.name);
    }
    return names.concat(".");
}