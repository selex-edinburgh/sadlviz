
operation DEFAULT_COMPONENT_HEIGHT() : Integer {
    return 30;
}
operation DEFAULT_COMPONENT_WIDTH() : Integer {
    return 30;
    }
operation DEFAULT_PORT_HEIGHT() : Integer {
    return 5;
    }
operation DEFAULT_PORT_WIDTH() : Integer {
    return 5;
    }
operation DEFAULT_X_OFFSET() : Integer {
    return 0;
    }
operation DEFAULT_Y_OFFSET() : Integer {
    return 5;
    }
operation DEFAULT_Y_POSITION() : Integer {
    return 0;
    }
operation DEFAULT_X_POSITION() : Integer {
    return 0;
    }
operation SIDE_WEST() : String {
    return "WEST";
    }
operation SIDE_EAST() : String {
    return "EAST";
}

operation ComponentInstance getWidth(): Integer {
    return DEFAULT_COMPONENT_WIDTH();
}

operation ContainerInstance getWidth(): Integer {
    return DEFAULT_COMPONENT_WIDTH();
}

operation ComponentInstance getWidth(): Integer {
    return DEFAULT_COMPONENT_WIDTH();
}

operation ContainerInstance getWidth(): Integer {
    return DEFAULT_COMPONENT_WIDTH();
}

operation Port getSide(): String {
    var side = SIDE_EAST();
//    if (self.conjugated) {
//        side = SIDE_WEST(); 
//    }
    return side;
}

// var counter = 0;

// operation ID(){return 0;}
// operation ALGORITHM(){return 1; }
// operation CHILDREN(){return 2;}
// operation TEXT (){return 3;}
// operation SIDE (){return 4;}
// operation X(){return 5;}
// operation Y(){return 6;} 
// operation OFFSET(){return 7;}
// operation WIDTH(){return 8;}
// operation HEIGHT(){return 9;}
// operation CLASS(){return 10;}
// operation ROOT_PORT(){return 11;}
// operation PARENT_PORT(){return 12;}
// operation LEVEL(){return 13;}
// operation PORT(){return 14;}

operation createNode() : MNode {
    var element = new MNode();
    element.class = "NODE";
    return element;
}

operation createPort() : MPort {
    var element = new MPort();
    element.class = "PORT";
    return element;
}

operation treeToSequence(rootPort: MPort, targetSequence: Sequence){
         targetSequence.add(rootPort); 
         var children = rootPort.subPorts;
         for (child in children) {
//            targetSequence.add(child);
            treeToSequence(child, targetSequence);
         }
}

operation calcuateContainerHeight(dummyPorts : OrderedSet): Integer {
    var height = DEFAULT_Y_OFFSET();
    for (port in dummyPorts) {
        height = height + port.height;
        height = height + DEFAULT_Y_OFFSET();
    } 
    return height;
}

/**
    Calculate heights and Ys of all ports (root ports and sub ports) 
*/
operation Port calculateSubPorts(rootPort : MPort, currentPort: MPort, level: Integer) {

    currentPort.label = self.name;
   
    var parent = currentPort.parentPort;
    var currentPorts = null;
    var index = 0;
    if (parent == null){
        if (currentPort.side = SIDE_WEST()) {
            currentPorts  = currentPort.node.westPorts; 
        } else { 
            currentPorts = currentPort.node.eastPorts;
        }
        index = currentPorts.indexOf(currentPort); 
    } else {
        currentPorts = parent.subPorts;
        index = currentPorts.indexOf(currentPort);
    }

    var nodePorts = null;
    if  (rootPort.side = SIDE_WEST()) { 
        nodePorts = rootPort.node.westPorts; 
    } else {
        nodePorts = rootPort.node.eastPorts;
    } 
    var rootPortIndex =  nodePorts.indexOf(rootPort);
    var childOffset = 0;

    var y = 0;
    var prevY = 0;
    var prevHeight = 0;
    
    // if the port is the first port then it has no previous port
    if (index == 0) {
      prevY = 0;
      prevHeight = 0;
    // if the port is not the first port (index > 0) then it has a previous port
    } else if (index > 0) {
      var prevPort = currentPorts.get(index - 1);
      prevY = prevPort.y;
      prevHeight = prevPort.height;
    }
    if (level == 0) {
      y = DEFAULT_Y_OFFSET() + (level * DEFAULT_Y_OFFSET()) + prevY + prevHeight;
//      y.println(currentPort.id);
      currentPort.y = y;
    } 
    else if (level > 0) {
      if (index == 0) {
//        currentPort.parentPort.y.println(currentPort.parentPort.id + " : " + currentPort.id + " : ");
        y = DEFAULT_Y_OFFSET() + currentPort.parentPort.y + prevHeight + (index * DEFAULT_Y_OFFSET());
      } else if (index > 0) {
        y = DEFAULT_Y_OFFSET() + prevY + prevHeight;
      }
      currentPort.y = y;
    }

    level = level + 1;
    
    if (self.isTypeOf(InterfacePort)){
        for (port in self.type.ports){
    //        if (not port.isTypeOf(InterfacePort)){
    //            continue;
    //        }
    
            var subPort = createPort();
            var subId = currentPort.id + "-" + port.name;
            subPort.id = subId;
            subPort.rootPort = rootPort;
            subPort.parentPort = currentPort;
            subPort.level = level;
            subPort.label = port.name;
            subPort.sadlPort = port;
            subPort.side = currentPort.side;
            currentPort.subPorts.add(subPort);
            
            // start recursive call
    //        if (port.isTypeOf(InterfacePort)){
                port.calculateSubPorts(rootPort, subPort, level);
    //        }
        }
    }
    
    level = level - 1;
    
    var height = DEFAULT_PORT_HEIGHT();
    for (sp in currentPort.subPorts) {
        var h =  sp.height;
        height = height + h;
        height = height + DEFAULT_PORT_HEIGHT();
    }
    currentPort.height = height;
}

/**
    Calculate the delta of incoming and outgoing edges for root ports 
*/
operation countPortInOut(connections: Sequence) : Map(String, Integer) {
    var map = Map{};
    for (connection in connections){
        var sourceName = connection.sadlConnection.from.getFullNameStr() + "-" + connection.sadlConnection.source[0].name;
//        sourceName.println("Source: ");
        var value = map.get(sourceName);
        if (value == null) {
            value = 0;
        }
        value = value - 1;
        map.put(sourceName, value);
        
        var destinationName = connection.sadlConnection.to.getFullNameStr() + "-" + connection.sadlConnection.destination[0].name;
//        destinationName.println("Destination: ");
        var value = map.get(destinationName);
        if (value == null) {
            value = 0;
        }
        value = value + 1;
        map.put(destinationName, value);
    }
    return map;
}

operation Port getY(): Integer {
    var y = DEFAULT_Y_POSITION();
    return y;
}

operation Port hasSubPort(): Boolean {
    var hasSubPort = false;
    if (self.type.ports.size > 0){
        hasSubPort = true;
    }
    return hasSubPort;
}

operation Port isSubPort(connection : Connection): Boolean {
    var isSubPort = false;
    if (connection.sadlConnection.source.indexOf(self) > 0 or connection.sadlConnection.destination.indexOf(self) > 0){
        isSubPort = true;
    }
    return isSubPort;
}

operation Port getBorderOffset(): Integer {
    return DEFAULT_X_OFFSET();
}

operation Port getWidth(): Integer {
   return DEFAULT_PORT_WIDTH();
}

operation InterfacePort getHeight(): Integer {
    var height = DEFAULT_PORT_HEIGHT();
    for (port in self.type.ports){
        if (port.isTypeOf(InterfacePort)){
            height = height + port.getHeight();
            height = height + DEFAULT_PORT_HEIGHT();
        }
    }
   return height;
}

operation Instance getHeight(): Integer {
   var height = DEFAULT_COMPONENT_HEIGHT();
    if (self.type.ports.size > 0){
        height = height + DEFAULT_PORT_HEIGHT();
        for (port in self.type.ports){
            height = height + port.getHeight();
            height = height + DEFAULT_PORT_HEIGHT();
        }
    }
    return height;
}

operation Component getHeight(): Integer {
   var height = DEFAULT_COMPONENT_HEIGHT();
    if (self.ports.size > 0){
        height = height + DEFAULT_PORT_HEIGHT();
        for (port in self.ports){
            height = height + port.getHeight();
            height = height + DEFAULT_PORT_HEIGHT();
        }
    }
    return height;
}

operation Container getHeight(): Integer {
   var height = DEFAULT_COMPONENT_HEIGHT();
    if (self.children.size > 0 or self.instances.size > 0){
        height = height + DEFAULT_COMPONENT_HEIGHT();
        for (instance in self.instances){
            height = height + instance.type.getHeight();
            height = height + DEFAULT_COMPONENT_HEIGHT();
        }
        for (container in self.children){
            height = height + container.getHeight();
            height = height + DEFAULT_COMPONENT_HEIGHT();
        }
    }
    return height;
}

operation populateContainerStack(rootNode, parentNode, element, level, containerStack, connections) {
    var node = createNode();
    node.id = parentNode.id + "-" + element.name;
    node.label = element.name;
    node.sadlContainer = element;
    node.level = level;
    node.class = element.type.eClass.getName();
    node.width = DEFAULT_COMPONENT_WIDTH();
    node.height = DEFAULT_COMPONENT_HEIGHT();
    node.parent = parentNode; 
    parentNode.children.add(node);

    containerStack.add(node);

    level = level + 1;
    if (element.isTypeOf(ContainerInstance)) {
        for (containerInstance in element.type.containerInstances) {
            populateContainerStack(rootNode, node, containerInstance, level, containerStack, connections);
        }
        for (componentInstance in element.type.componentInstances) {
            populateContainerStack(rootNode, node, componentInstance, level, containerStack, connections);
        }
    }
    if (element.isTypeOf(ComponentInstance)) {
        for (componentInstance in element.type.parts) {
            populateContainerStack(rootNode, node, componentInstance, level, containerStack, connections);
        }
    }
    
    if (element.isTypeOf(ContainerInstance)) {
        for (connection in element.type.connections) {
            var edge = new MEdge();
            if (connection.name != null) {
                edge.id = element.id + "-" + connection.name;
            } else {
                edge.id = element.id + "-" + Sequence{1..100}.random();
            }
            edge.sadlConnection = connection;
            var from = MConnectableElement.all.selectFirst( e | e.isTypeOf(MNode) and e.sadlContainer.isTypeOf(ComponentInstance) and e.sadlContainer == connection.from);
            var to = MConnectableElement.all.selectFirst( e | e.isTypeOf(MNode) and e.sadlContainer.isTypeOf(ComponentInstance) and e.sadlContainer == connection.to);

            if (from <> null and to <> null) {
//                var sourceName = from.id +"-" + connection.getSourceName();
//                var targetName = to.id + "-" + connection.getDestinationName();
//                sourceName.println("Source: ");
//                targetName.println("Target: ");
//                "".println();
                edge.source = from;
                edge.target = to;
                connections.add(edge);
            }
        }
    }
    level = level - 1;
}

operation createSequencedPorts(parentNode: MNode, port: Port, portInOut: Map(String, Integer)): Sequence{
    var level = 0;
    var rootPort = createPort();
    var rootPortName = parentNode.id + "-" + port.name;
    rootPort.id = rootPortName;
    rootPort.sadlPort = port;
    rootPort.node =  parentNode;

    if (portInOut.get(rootPortName) > 0) {
        parentNode.westPorts.add(rootPort);
        rootPort.side = SIDE_WEST();
    } else {
        parentNode.eastPorts.add(rootPort);
    }

    port.calculateSubPorts(rootPort, rootPort, level);
    var subPorts = Sequence{};
    treeToSequence(rootPort, subPorts);
    return subPorts;
}

operation calculateContainerHeight(node: MNode) : Integer {
    var highestSidePorts = node.eastPorts;
    var westChildren = node.westPorts;
    var eastChildren = node.eastPorts;
    var westY = 0;
    var eastY = 0;
    if (westChildren.size > 0) {
    var lastChild = westChildren.get(westChildren.size - 1);
        westY = lastChild.y + lastChild.height;
    }
    if (eastChildren.size > 0) {
        var lastChild = eastChildren.get(eastChildren.size - 1);
        eastY = lastChild.y + lastChild.height;
    }
    
    if (westY > eastY) {
        highestSidePorts = westPorts;
    } 
    var containerHeight = calcuateContainerHeight(highestSidePorts);
    if (containerHeight < DEFAULT_COMPONENT_HEIGHT() - DEFAULT_Y_OFFSET()) {
        containerHeight = DEFAULT_COMPONENT_HEIGHT();
    }
    return containerHeight;
}