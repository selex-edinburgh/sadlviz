/**
 * generated by Xtext 2.31.0
 */
package com.leonardo.lsaf.sadl.sadl.impl;

import com.leonardo.lsaf.sadl.sadl.Alias;
import com.leonardo.lsaf.sadl.sadl.Application;
import com.leonardo.lsaf.sadl.sadl.Attribute;
import com.leonardo.lsaf.sadl.sadl.Component;
import com.leonardo.lsaf.sadl.sadl.Connection;
import com.leonardo.lsaf.sadl.sadl.ConnectionMapping;
import com.leonardo.lsaf.sadl.sadl.ContainerMapping;
import com.leonardo.lsaf.sadl.sadl.Deployment;
import com.leonardo.lsaf.sadl.sadl.Enumeration;
import com.leonardo.lsaf.sadl.sadl.Enumerator;
import com.leonardo.lsaf.sadl.sadl.Instance;
import com.leonardo.lsaf.sadl.sadl.Interface;
import com.leonardo.lsaf.sadl.sadl.InterfacePort;
import com.leonardo.lsaf.sadl.sadl.Link;
import com.leonardo.lsaf.sadl.sadl.Model;
import com.leonardo.lsaf.sadl.sadl.PackageableElement;
import com.leonardo.lsaf.sadl.sadl.Platform;
import com.leonardo.lsaf.sadl.sadl.Port;
import com.leonardo.lsaf.sadl.sadl.Primitive;
import com.leonardo.lsaf.sadl.sadl.Processor;
import com.leonardo.lsaf.sadl.sadl.Property;
import com.leonardo.lsaf.sadl.sadl.PropertyValue;
import com.leonardo.lsaf.sadl.sadl.SadlFactory;
import com.leonardo.lsaf.sadl.sadl.SadlPackage;
import com.leonardo.lsaf.sadl.sadl.Strategy;
import com.leonardo.lsaf.sadl.sadl.Topic;
import com.leonardo.lsaf.sadl.sadl.TopicPort;
import com.leonardo.lsaf.sadl.sadl.Transport;
import com.leonardo.lsaf.sadl.sadl.Type;
import com.leonardo.lsaf.sadl.sadl.Unit;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SadlFactoryImpl extends EFactoryImpl implements SadlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SadlFactory init()
  {
    try
    {
      SadlFactory theSadlFactory = (SadlFactory)EPackage.Registry.INSTANCE.getEFactory(SadlPackage.eNS_URI);
      if (theSadlFactory != null)
      {
        return theSadlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SadlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SadlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SadlPackage.MODEL: return createModel();
      case SadlPackage.PACKAGE: return createPackage();
      case SadlPackage.PACKAGEABLE_ELEMENT: return createPackageableElement();
      case SadlPackage.UNIT: return createUnit();
      case SadlPackage.TYPE: return createType();
      case SadlPackage.COMPONENT: return createComponent();
      case SadlPackage.PRIMITIVE: return createPrimitive();
      case SadlPackage.INTERFACE: return createInterface();
      case SadlPackage.ENUMERATION: return createEnumeration();
      case SadlPackage.TOPIC: return createTopic();
      case SadlPackage.ALIAS: return createAlias();
      case SadlPackage.PORT: return createPort();
      case SadlPackage.ENUMERATOR: return createEnumerator();
      case SadlPackage.ATTRIBUTE: return createAttribute();
      case SadlPackage.TOPIC_PORT: return createTopicPort();
      case SadlPackage.INTERFACE_PORT: return createInterfacePort();
      case SadlPackage.PLATFORM: return createPlatform();
      case SadlPackage.PROCESSOR: return createProcessor();
      case SadlPackage.LINK: return createLink();
      case SadlPackage.PROPERTY: return createProperty();
      case SadlPackage.PROPERTY_VALUE: return createPropertyValue();
      case SadlPackage.TRANSPORT: return createTransport();
      case SadlPackage.APPLICATION: return createApplication();
      case SadlPackage.CONTAINER: return createContainer();
      case SadlPackage.INSTANCE: return createInstance();
      case SadlPackage.CONNECTION: return createConnection();
      case SadlPackage.DEPLOYMENT: return createDeployment();
      case SadlPackage.CONTAINER_MAPPING: return createContainerMapping();
      case SadlPackage.CONNECTION_MAPPING: return createConnectionMapping();
      case SadlPackage.STRATEGY: return createStrategy();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public com.leonardo.lsaf.sadl.sadl.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageableElement createPackageableElement()
  {
    PackageableElementImpl packageableElement = new PackageableElementImpl();
    return packageableElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Primitive createPrimitive()
  {
    PrimitiveImpl primitive = new PrimitiveImpl();
    return primitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface createInterface()
  {
    InterfaceImpl interface_ = new InterfaceImpl();
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Topic createTopic()
  {
    TopicImpl topic = new TopicImpl();
    return topic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Alias createAlias()
  {
    AliasImpl alias = new AliasImpl();
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Port createPort()
  {
    PortImpl port = new PortImpl();
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumerator createEnumerator()
  {
    EnumeratorImpl enumerator = new EnumeratorImpl();
    return enumerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopicPort createTopicPort()
  {
    TopicPortImpl topicPort = new TopicPortImpl();
    return topicPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfacePort createInterfacePort()
  {
    InterfacePortImpl interfacePort = new InterfacePortImpl();
    return interfacePort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Platform createPlatform()
  {
    PlatformImpl platform = new PlatformImpl();
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Processor createProcessor()
  {
    ProcessorImpl processor = new ProcessorImpl();
    return processor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValue createPropertyValue()
  {
    PropertyValueImpl propertyValue = new PropertyValueImpl();
    return propertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transport createTransport()
  {
    TransportImpl transport = new TransportImpl();
    return transport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public com.leonardo.lsaf.sadl.sadl.Container createContainer()
  {
    ContainerImpl container = new ContainerImpl();
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instance createInstance()
  {
    InstanceImpl instance = new InstanceImpl();
    return instance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connection createConnection()
  {
    ConnectionImpl connection = new ConnectionImpl();
    return connection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Deployment createDeployment()
  {
    DeploymentImpl deployment = new DeploymentImpl();
    return deployment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerMapping createContainerMapping()
  {
    ContainerMappingImpl containerMapping = new ContainerMappingImpl();
    return containerMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConnectionMapping createConnectionMapping()
  {
    ConnectionMappingImpl connectionMapping = new ConnectionMappingImpl();
    return connectionMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Strategy createStrategy()
  {
    StrategyImpl strategy = new StrategyImpl();
    return strategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SadlPackage getSadlPackage()
  {
    return (SadlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SadlPackage getPackage()
  {
    return SadlPackage.eINSTANCE;
  }

} //SadlFactoryImpl
