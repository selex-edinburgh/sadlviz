/*
 * generated by Xtext 2.31.0
 */
package com.leonardo.lsaf.sadl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SADLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackageParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		
		//Model:
		//    {Model} package+=(Package)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} package+=(Package)*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//package+=(Package)*
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//(Package)
		public RuleCall getPackagePackageParserRuleCall_1_0() { return cPackagePackageParserRuleCall_1_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cContentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentsPackageableElementParserRuleCall_3_0 = (RuleCall)cContentsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//    'package' name=QualifiedName
		//    (description=STRING)?
		//    (contents+=PackageableElement)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		//(description=STRING)?
		//(contents+=PackageableElement)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(contents+=PackageableElement)*
		public Assignment getContentsAssignment_3() { return cContentsAssignment_3; }
		
		//PackageableElement
		public RuleCall getContentsPackageableElementParserRuleCall_3_0() { return cContentsPackageableElementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName hidden():
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PackageableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.PackageableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfaceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPlatformParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cApplicationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransportParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStrategyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDeploymentParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cContainerParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//PackageableElement:
		//    Unit | Type | Component | Interface | Platform |
		//    Application | Transport | Strategy | Deployment | Container;
		@Override public ParserRule getRule() { return rule; }
		
		//Unit | Type | Component | Interface | Platform |
		//Application | Transport | Strategy | Deployment | Container
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Unit
		public RuleCall getUnitParserRuleCall_0() { return cUnitParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//Component
		public RuleCall getComponentParserRuleCall_2() { return cComponentParserRuleCall_2; }
		
		//Interface
		public RuleCall getInterfaceParserRuleCall_3() { return cInterfaceParserRuleCall_3; }
		
		//Platform
		public RuleCall getPlatformParserRuleCall_4() { return cPlatformParserRuleCall_4; }
		
		//Application
		public RuleCall getApplicationParserRuleCall_5() { return cApplicationParserRuleCall_5; }
		
		//Transport
		public RuleCall getTransportParserRuleCall_6() { return cTransportParserRuleCall_6; }
		
		//Strategy
		public RuleCall getStrategyParserRuleCall_7() { return cStrategyParserRuleCall_7; }
		
		//Deployment
		public RuleCall getDeploymentParserRuleCall_8() { return cDeploymentParserRuleCall_8; }
		
		//Container
		public RuleCall getContainerParserRuleCall_9() { return cContainerParserRuleCall_9; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGroupAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cGroupUnitCrossReference_2_1_0 = (CrossReference)cGroupAssignment_2_1.eContents().get(0);
		private final RuleCall cGroupUnitQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cGroupUnitCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Unit:
		//    'unit' name=ID (':' group=[Unit|QualifiedName])? (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'unit' name=ID (':' group=[Unit|QualifiedName])? (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'unit'
		public Keyword getUnitKeyword_0() { return cUnitKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' group=[Unit|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//group=[Unit|QualifiedName]
		public Assignment getGroupAssignment_2_1() { return cGroupAssignment_2_1; }
		
		//[Unit|QualifiedName]
		public CrossReference getGroupUnitCrossReference_2_1_0() { return cGroupUnitCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getGroupUnitQualifiedNameParserRuleCall_2_1_0_1() { return cGroupUnitQualifiedNameParserRuleCall_2_1_0_1; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTopicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAliasParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//    Primitive | Enumeration | Topic | Alias;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive | Enumeration | Topic | Alias
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
		
		//Topic
		public RuleCall getTopicParserRuleCall_2() { return cTopicParserRuleCall_2; }
		
		//Alias
		public RuleCall getAliasParserRuleCall_3() { return cAliasParserRuleCall_3; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Primitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMinRealParserRuleCall_2_0_0 = (RuleCall)cMinAssignment_2_0.eContents().get(0);
		private final Assignment cMaxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMaxRealParserRuleCall_2_1_0 = (RuleCall)cMaxAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cResAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cResRealParserRuleCall_2_2_1_0 = (RuleCall)cResAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Primitive:
		//    'primitive' name=ID (min=Real ->max=Real (':' res=Real)?)?';';
		@Override public ParserRule getRule() { return rule; }
		
		//'primitive' name=ID (min=Real ->max=Real (':' res=Real)?)?';'
		public Group getGroup() { return cGroup; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(min=Real ->max=Real (':' res=Real)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//min=Real
		public Assignment getMinAssignment_2_0() { return cMinAssignment_2_0; }
		
		//Real
		public RuleCall getMinRealParserRuleCall_2_0_0() { return cMinRealParserRuleCall_2_0_0; }
		
		//->max=Real
		public Assignment getMaxAssignment_2_1() { return cMaxAssignment_2_1; }
		
		//Real
		public RuleCall getMaxRealParserRuleCall_2_1_0() { return cMaxRealParserRuleCall_2_1_0; }
		
		//(':' res=Real)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//':'
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }
		
		//res=Real
		public Assignment getResAssignment_2_2_1() { return cResAssignment_2_2_1; }
		
		//Real
		public RuleCall getResRealParserRuleCall_2_2_1_0() { return cResRealParserRuleCall_2_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cEXPTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Real returns ecore::EDouble hidden():
		//    ('-')? INT '.' (EXP | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//('-')? INT '.' (EXP | INT)
		public Group getGroup() { return cGroup; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//(EXP | INT)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//EXP
		public RuleCall getEXPTerminalRuleCall_3_0() { return cEXPTerminalRuleCall_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_1() { return cINTTerminalRuleCall_3_1; }
	}
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsPortParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Interface:
		//    'interface' name=ID
		//    (description=STRING)?
		//    (ports+=Port)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID
		//(description=STRING)?
		//(ports+=Port)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(ports+=Port)*
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_0() { return cPortsPortParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cEnumeratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumeratorsEnumeratorParserRuleCall_3_0 = (RuleCall)cEnumeratorsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//    'enum' name=ID
		//    (description=STRING)?
		//    (enumerators+=Enumerator)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID
		//(description=STRING)?
		//(enumerators+=Enumerator)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(enumerators+=Enumerator)*
		public Assignment getEnumeratorsAssignment_3() { return cEnumeratorsAssignment_3; }
		
		//Enumerator
		public RuleCall getEnumeratorsEnumeratorParserRuleCall_3_0() { return cEnumeratorsEnumeratorParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TopicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Topic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Topic:
		//    'topic' name=ID
		//    (description=STRING)?
		//    (attributes+=Attribute)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'topic' name=ID
		//(description=STRING)?
		//(attributes+=Attribute)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'topic'
		public Keyword getTopicKeyword_0() { return cTopicKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(attributes+=Attribute)*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMinRealParserRuleCall_2_0_0 = (RuleCall)cMinAssignment_2_0.eContents().get(0);
		private final Assignment cMaxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMaxRealParserRuleCall_2_1_0 = (RuleCall)cMaxAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cResAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cResRealParserRuleCall_2_2_1_0 = (RuleCall)cResAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_3_0_1_0 = (Keyword)cUnboundedAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cUpperboundAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cUpperboundINTTerminalRuleCall_3_1_0_0 = (RuleCall)cUpperboundAssignment_3_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cUnitUnitCrossReference_4_1_0 = (CrossReference)cUnitAssignment_4_1.eContents().get(0);
		private final RuleCall cUnitUnitQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cUnitUnitCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Alias:
		//    'alias' type=[Type|QualifiedName] (min=Real ->max=Real (':' res=Real)?)? ('[' unbounded='*' | upperbound=INT ']')? (
		//    '(' unit=[Unit|QualifiedName] ')')? 'as' name=ID (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'alias' type=[Type|QualifiedName] (min=Real ->max=Real (':' res=Real)?)? ('[' unbounded='*' | upperbound=INT ']')? (
		//'(' unit=[Unit|QualifiedName] ')')? 'as' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'alias'
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeTypeQualifiedNameParserRuleCall_1_0_1; }
		
		//(min=Real ->max=Real (':' res=Real)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//min=Real
		public Assignment getMinAssignment_2_0() { return cMinAssignment_2_0; }
		
		//Real
		public RuleCall getMinRealParserRuleCall_2_0_0() { return cMinRealParserRuleCall_2_0_0; }
		
		//->max=Real
		public Assignment getMaxAssignment_2_1() { return cMaxAssignment_2_1; }
		
		//Real
		public RuleCall getMaxRealParserRuleCall_2_1_0() { return cMaxRealParserRuleCall_2_1_0; }
		
		//(':' res=Real)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//':'
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }
		
		//res=Real
		public Assignment getResAssignment_2_2_1() { return cResAssignment_2_2_1; }
		
		//Real
		public RuleCall getResRealParserRuleCall_2_2_1_0() { return cResRealParserRuleCall_2_2_1_0; }
		
		//('[' unbounded='*' | upperbound=INT ']')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'[' unbounded='*'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0_0() { return cLeftSquareBracketKeyword_3_0_0; }
		
		//unbounded='*'
		public Assignment getUnboundedAssignment_3_0_1() { return cUnboundedAssignment_3_0_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_3_0_1_0() { return cUnboundedAsteriskKeyword_3_0_1_0; }
		
		//upperbound=INT ']'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//upperbound=INT
		public Assignment getUpperboundAssignment_3_1_0() { return cUpperboundAssignment_3_1_0; }
		
		//INT
		public RuleCall getUpperboundINTTerminalRuleCall_3_1_0_0() { return cUpperboundINTTerminalRuleCall_3_1_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_1() { return cRightSquareBracketKeyword_3_1_1; }
		
		//(
		//   '(' unit=[Unit|QualifiedName] ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//unit=[Unit|QualifiedName]
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//[Unit|QualifiedName]
		public CrossReference getUnitUnitCrossReference_4_1_0() { return cUnitUnitCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getUnitUnitQualifiedNameParserRuleCall_4_1_0_1() { return cUnitUnitQualifiedNameParserRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//'as'
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_0() { return cDescriptionSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopicPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfacePortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Port:
		//    TopicPort | InterfacePort;
		@Override public ParserRule getRule() { return rule; }
		
		//TopicPort | InterfacePort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TopicPort
		public RuleCall getTopicPortParserRuleCall_0() { return cTopicPortParserRuleCall_0; }
		
		//InterfacePort
		public RuleCall getInterfacePortParserRuleCall_1() { return cInterfacePortParserRuleCall_1; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Enumerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cDeprecatedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cDeprecatedDeprecatedKeyword_0_1_0 = (Keyword)cDeprecatedAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumerator:
		//    ('value' | deprecated?='deprecated') name=ID ('=' value=INT)? (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('value' | deprecated?='deprecated') name=ID ('=' value=INT)? (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//('value' | deprecated?='deprecated')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'value'
		public Keyword getValueKeyword_0_0() { return cValueKeyword_0_0; }
		
		//deprecated?='deprecated'
		public Assignment getDeprecatedAssignment_0_1() { return cDeprecatedAssignment_0_1; }
		
		//'deprecated'
		public Keyword getDeprecatedDeprecatedKeyword_0_1_0() { return cDeprecatedDeprecatedKeyword_0_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' value=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cDeprecatedAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cDeprecatedDeprecatedKeyword_0_1_0 = (Keyword)cDeprecatedAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_3_0_1_0 = (Keyword)cUnboundedAssignment_3_0_1.eContents().get(0);
		private final Assignment cLowerboundAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLowerboundINTTerminalRuleCall_3_1_0 = (RuleCall)cLowerboundAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cGroup_3_2.eContents().get(0);
		private final Assignment cLowerboundAssignment_3_2_0_0 = (Assignment)cGroup_3_2_0.eContents().get(0);
		private final RuleCall cLowerboundINTTerminalRuleCall_3_2_0_0_0 = (RuleCall)cLowerboundAssignment_3_2_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_2_0_1 = (Keyword)cGroup_3_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3_2_0_2 = (Alternatives)cGroup_3_2_0.eContents().get(2);
		private final Assignment cUnboundedAssignment_3_2_0_2_0 = (Assignment)cAlternatives_3_2_0_2.eContents().get(0);
		private final Keyword cUnboundedAsteriskKeyword_3_2_0_2_0_0 = (Keyword)cUnboundedAssignment_3_2_0_2_0.eContents().get(0);
		private final Assignment cUpperboundAssignment_3_2_0_2_1 = (Assignment)cAlternatives_3_2_0_2.eContents().get(1);
		private final RuleCall cUpperboundINTTerminalRuleCall_3_2_0_2_1_0 = (RuleCall)cUpperboundAssignment_3_2_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cUnitUnitCrossReference_4_1_0 = (CrossReference)cUnitAssignment_4_1.eContents().get(0);
		private final RuleCall cUnitUnitQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cUnitUnitCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Attribute:
		//    ('attribute' | deprecated?='deprecated') type=[Type|QualifiedName] name=ID ('[' unbounded?='*' | lowerbound=INT |
		//    (lowerbound=INT '..' (unbounded?='*' | upperbound=INT))']')? ('(' unit=[Unit|QualifiedName] ')')?
		//    (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('attribute' | deprecated?='deprecated') type=[Type|QualifiedName] name=ID ('[' unbounded?='*' | lowerbound=INT |
		//(lowerbound=INT '..' (unbounded?='*' | upperbound=INT))']')? ('(' unit=[Unit|QualifiedName] ')')?
		//(description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//('attribute' | deprecated?='deprecated')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0_0() { return cAttributeKeyword_0_0; }
		
		//deprecated?='deprecated'
		public Assignment getDeprecatedAssignment_0_1() { return cDeprecatedAssignment_0_1; }
		
		//'deprecated'
		public Keyword getDeprecatedDeprecatedKeyword_0_1_0() { return cDeprecatedDeprecatedKeyword_0_1_0; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeTypeQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' unbounded?='*' | lowerbound=INT |
		//   (lowerbound=INT '..' (unbounded?='*' | upperbound=INT))']')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'[' unbounded?='*'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0_0() { return cLeftSquareBracketKeyword_3_0_0; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_3_0_1() { return cUnboundedAssignment_3_0_1; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_3_0_1_0() { return cUnboundedAsteriskKeyword_3_0_1_0; }
		
		//lowerbound=INT
		public Assignment getLowerboundAssignment_3_1() { return cLowerboundAssignment_3_1; }
		
		//INT
		public RuleCall getLowerboundINTTerminalRuleCall_3_1_0() { return cLowerboundINTTerminalRuleCall_3_1_0; }
		
		//(lowerbound=INT '..' (unbounded?='*' | upperbound=INT))']'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//(lowerbound=INT '..' (unbounded?='*' | upperbound=INT))
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }
		
		//lowerbound=INT
		public Assignment getLowerboundAssignment_3_2_0_0() { return cLowerboundAssignment_3_2_0_0; }
		
		//INT
		public RuleCall getLowerboundINTTerminalRuleCall_3_2_0_0_0() { return cLowerboundINTTerminalRuleCall_3_2_0_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_3_2_0_1() { return cFullStopFullStopKeyword_3_2_0_1; }
		
		//(unbounded?='*' | upperbound=INT)
		public Alternatives getAlternatives_3_2_0_2() { return cAlternatives_3_2_0_2; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_3_2_0_2_0() { return cUnboundedAssignment_3_2_0_2_0; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_3_2_0_2_0_0() { return cUnboundedAsteriskKeyword_3_2_0_2_0_0; }
		
		//upperbound=INT
		public Assignment getUpperboundAssignment_3_2_0_2_1() { return cUpperboundAssignment_3_2_0_2_1; }
		
		//INT
		public RuleCall getUpperboundINTTerminalRuleCall_3_2_0_2_1_0() { return cUpperboundINTTerminalRuleCall_3_2_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2_1() { return cRightSquareBracketKeyword_3_2_1; }
		
		//('(' unit=[Unit|QualifiedName] ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//unit=[Unit|QualifiedName]
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//[Unit|QualifiedName]
		public CrossReference getUnitUnitCrossReference_4_1_0() { return cUnitUnitCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getUnitUnitQualifiedNameParserRuleCall_4_1_0_1() { return cUnitUnitQualifiedNameParserRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class TopicPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.TopicPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConjugatedAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cConjugatedReceivesKeyword_2_0_0 = (Keyword)cConjugatedAssignment_2_0.eContents().get(0);
		private final Keyword cSendsKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTopicCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTopicQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeTopicCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TopicPort:
		//    'port' name=ID (conjugated?='receives' | 'sends') type=[Topic|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' name=ID (conjugated?='receives' | 'sends') type=[Topic|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(conjugated?='receives' | 'sends')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//conjugated?='receives'
		public Assignment getConjugatedAssignment_2_0() { return cConjugatedAssignment_2_0; }
		
		//'receives'
		public Keyword getConjugatedReceivesKeyword_2_0_0() { return cConjugatedReceivesKeyword_2_0_0; }
		
		//'sends'
		public Keyword getSendsKeyword_2_1() { return cSendsKeyword_2_1; }
		
		//type=[Topic|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Topic|QualifiedName]
		public CrossReference getTypeTopicCrossReference_3_0() { return cTypeTopicCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeTopicQualifiedNameParserRuleCall_3_0_1() { return cTypeTopicQualifiedNameParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class InterfacePortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.InterfacePort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConjugatedAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cConjugatedRequiresKeyword_2_0_0 = (Keyword)cConjugatedAssignment_2_0.eContents().get(0);
		private final Keyword cProvidesKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeInterfaceCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeInterfaceQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeInterfaceCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfacePort:
		//    'port' name=ID (conjugated?='requires' | 'provides') type=[Interface|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' name=ID (conjugated?='requires' | 'provides') type=[Interface|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(conjugated?='requires' | 'provides')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//conjugated?='requires'
		public Assignment getConjugatedAssignment_2_0() { return cConjugatedAssignment_2_0; }
		
		//'requires'
		public Keyword getConjugatedRequiresKeyword_2_0_0() { return cConjugatedRequiresKeyword_2_0_0; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_1() { return cProvidesKeyword_2_1; }
		
		//type=[Interface|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Interface|QualifiedName]
		public CrossReference getTypeInterfaceCrossReference_3_0() { return cTypeInterfaceCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeInterfaceQualifiedNameParserRuleCall_3_0_1() { return cTypeInterfaceQualifiedNameParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PlatformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Platform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlatformKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cProcessorsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cProcessorsProcessorParserRuleCall_3_0_0 = (RuleCall)cProcessorsAssignment_3_0.eContents().get(0);
		private final Assignment cLinksAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_3_1_0 = (RuleCall)cLinksAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Platform:
		//    'platform' name=ID (description=STRING)?
		//    (processors+=Processor | links+=Link)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'platform' name=ID (description=STRING)?
		//(processors+=Processor | links+=Link)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'platform'
		public Keyword getPlatformKeyword_0() { return cPlatformKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(processors+=Processor | links+=Link)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//processors+=Processor
		public Assignment getProcessorsAssignment_3_0() { return cProcessorsAssignment_3_0; }
		
		//Processor
		public RuleCall getProcessorsProcessorParserRuleCall_3_0_0() { return cProcessorsProcessorParserRuleCall_3_0_0; }
		
		//links+=Link
		public Assignment getLinksAssignment_3_1() { return cLinksAssignment_3_1; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_3_1_0() { return cLinksLinkParserRuleCall_3_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Processor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Processor:
		//    'processor' name=ID (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'processor' name=ID (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'processor'
		public Keyword getProcessorKeyword_0() { return cProcessorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConnectsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cProcessorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cProcessorsProcessorCrossReference_3_2_0 = (CrossReference)cProcessorsAssignment_3_2.eContents().get(0);
		private final RuleCall cProcessorsProcessorQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cProcessorsProcessorCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cProcessorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cProcessorsProcessorCrossReference_3_3_1_0 = (CrossReference)cProcessorsAssignment_3_3_1.eContents().get(0);
		private final RuleCall cProcessorsProcessorQualifiedNameParserRuleCall_3_3_1_0_1 = (RuleCall)cProcessorsProcessorCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOverKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTransportAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTransportTransportCrossReference_4_1_0 = (CrossReference)cTransportAssignment_4_1.eContents().get(0);
		private final RuleCall cTransportTransportIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTransportTransportCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cValueAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cValuePropertyValueParserRuleCall_4_2_1_0 = (RuleCall)cValueAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cValueAssignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final RuleCall cValuePropertyValueParserRuleCall_4_2_2_1_0 = (RuleCall)cValueAssignment_4_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2_3 = (Keyword)cGroup_4_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Link:
		//    'link' name=ID (description=STRING)?
		//    ('connects' '(' processors+=[Processor|QualifiedName] (',' processors+=[Processor|QualifiedName])* ')' ';')?
		//    ('over' transport=[Transport] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')? ';')?
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'link' name=ID (description=STRING)?
		//('connects' '(' processors+=[Processor|QualifiedName] (',' processors+=[Processor|QualifiedName])* ')' ';')?
		//('over' transport=[Transport] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')? ';')?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('connects' '(' processors+=[Processor|QualifiedName] (',' processors+=[Processor|QualifiedName])* ')' ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'connects'
		public Keyword getConnectsKeyword_3_0() { return cConnectsKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//processors+=[Processor|QualifiedName]
		public Assignment getProcessorsAssignment_3_2() { return cProcessorsAssignment_3_2; }
		
		//[Processor|QualifiedName]
		public CrossReference getProcessorsProcessorCrossReference_3_2_0() { return cProcessorsProcessorCrossReference_3_2_0; }
		
		//QualifiedName
		public RuleCall getProcessorsProcessorQualifiedNameParserRuleCall_3_2_0_1() { return cProcessorsProcessorQualifiedNameParserRuleCall_3_2_0_1; }
		
		//(',' processors+=[Processor|QualifiedName])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//processors+=[Processor|QualifiedName]
		public Assignment getProcessorsAssignment_3_3_1() { return cProcessorsAssignment_3_3_1; }
		
		//[Processor|QualifiedName]
		public CrossReference getProcessorsProcessorCrossReference_3_3_1_0() { return cProcessorsProcessorCrossReference_3_3_1_0; }
		
		//QualifiedName
		public RuleCall getProcessorsProcessorQualifiedNameParserRuleCall_3_3_1_0_1() { return cProcessorsProcessorQualifiedNameParserRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//';'
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }
		
		//('over' transport=[Transport] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')? ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'over'
		public Keyword getOverKeyword_4_0() { return cOverKeyword_4_0; }
		
		//transport=[Transport]
		public Assignment getTransportAssignment_4_1() { return cTransportAssignment_4_1; }
		
		//[Transport]
		public CrossReference getTransportTransportCrossReference_4_1_0() { return cTransportTransportCrossReference_4_1_0; }
		
		//ID
		public RuleCall getTransportTransportIDTerminalRuleCall_4_1_0_1() { return cTransportTransportIDTerminalRuleCall_4_1_0_1; }
		
		//('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2_0() { return cLeftParenthesisKeyword_4_2_0; }
		
		//value+=PropertyValue
		public Assignment getValueAssignment_4_2_1() { return cValueAssignment_4_2_1; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_4_2_1_0() { return cValuePropertyValueParserRuleCall_4_2_1_0; }
		
		//(',' value+=PropertyValue)*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_2_0() { return cCommaKeyword_4_2_2_0; }
		
		//value+=PropertyValue
		public Assignment getValueAssignment_4_2_2_1() { return cValueAssignment_4_2_2_1; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_4_2_2_1_0() { return cValuePropertyValueParserRuleCall_4_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2_3() { return cRightParenthesisKeyword_4_2_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalQuestionMarkKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Property:
		//    'property' name=ID (optional?='?')? (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID (optional?='?')? (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(optional?='?')?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }
		
		//'?'
		public Keyword getOptionalQuestionMarkKeyword_2_0() { return cOptionalQuestionMarkKeyword_2_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.PropertyValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PropertyValue:
		//    property=[Property] '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[Property] '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//property=[Property]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[Property]
		public CrossReference getPropertyPropertyCrossReference_0_0() { return cPropertyPropertyCrossReference_0_0; }
		
		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_0_0_1() { return cPropertyPropertyIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class TransportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Transport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transport:
		//    'transport' name=ID (description=STRING)? (properties+=Property)* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'transport' name=ID (description=STRING)? (properties+=Property)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'transport'
		public Keyword getTransportKeyword_0() { return cTransportKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cContainerInstancesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainerInstancesContainerInstanceParserRuleCall_3_0 = (RuleCall)cContainerInstancesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Application:
		//    'application' name=ID (description=STRING)?
		//    (containerInstances+=ContainerInstance)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'application' name=ID (description=STRING)?
		//(containerInstances+=ContainerInstance)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(containerInstances+=ContainerInstance)*
		public Assignment getContainerInstancesAssignment_3() { return cContainerInstancesAssignment_3; }
		
		//ContainerInstance
		public RuleCall getContainerInstancesContainerInstanceParserRuleCall_3_0() { return cContainerInstancesContainerInstanceParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cComponentInstancesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cComponentInstancesComponentInstanceParserRuleCall_3_0_0 = (RuleCall)cComponentInstancesAssignment_3_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cConnectionsConnectionParserRuleCall_3_1_0 = (RuleCall)cConnectionsAssignment_3_1.eContents().get(0);
		private final Assignment cContainerInstancesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cContainerInstancesContainerInstanceParserRuleCall_3_2_0 = (RuleCall)cContainerInstancesAssignment_3_2.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Container:
		//    'container' name=ID (description=STRING)?
		//    (componentInstances+=ComponentInstance | connections+=Connection | containerInstances+=ContainerInstance)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=ID (description=STRING)?
		//(componentInstances+=ComponentInstance | connections+=Connection | containerInstances+=ContainerInstance)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(componentInstances+=ComponentInstance | connections+=Connection | containerInstances+=ContainerInstance)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//componentInstances+=ComponentInstance
		public Assignment getComponentInstancesAssignment_3_0() { return cComponentInstancesAssignment_3_0; }
		
		//ComponentInstance
		public RuleCall getComponentInstancesComponentInstanceParserRuleCall_3_0_0() { return cComponentInstancesComponentInstanceParserRuleCall_3_0_0; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_3_1() { return cConnectionsAssignment_3_1; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_3_1_0() { return cConnectionsConnectionParserRuleCall_3_1_0; }
		
		//containerInstances+=ContainerInstance
		public Assignment getContainerInstancesAssignment_3_2() { return cContainerInstancesAssignment_3_2; }
		
		//ContainerInstance
		public RuleCall getContainerInstancesContainerInstanceParserRuleCall_3_2_0() { return cContainerInstancesContainerInstanceParserRuleCall_3_2_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ContainerInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.ContainerInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainer_instanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeContainerCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeContainerQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeContainerCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContainerInstance:
		//    'container_instance'
		//    type=[Container|QualifiedName] name=ID
		//    (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'container_instance'
		//type=[Container|QualifiedName] name=ID
		//(description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'container_instance'
		public Keyword getContainer_instanceKeyword_0() { return cContainer_instanceKeyword_0; }
		
		//type=[Container|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Container|QualifiedName]
		public CrossReference getTypeContainerCrossReference_1_0() { return cTypeContainerCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeContainerQualifiedNameParserRuleCall_1_0_1() { return cTypeContainerQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPartsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPartsComponentInstanceParserRuleCall_3_0_0 = (RuleCall)cPartsAssignment_3_0.eContents().get(0);
		private final Assignment cPortsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_3_1_0 = (RuleCall)cPortsAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component:
		//    'component' name=ID
		//    (description=STRING)?
		//    (parts+=ComponentInstance | ports+=Port)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID
		//(description=STRING)?
		//(parts+=ComponentInstance | ports+=Port)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(parts+=ComponentInstance | ports+=Port)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//parts+=ComponentInstance
		public Assignment getPartsAssignment_3_0() { return cPartsAssignment_3_0; }
		
		//ComponentInstance
		public RuleCall getPartsComponentInstanceParserRuleCall_3_0_0() { return cPartsComponentInstanceParserRuleCall_3_0_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_3_1() { return cPortsAssignment_3_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_3_1_0() { return cPortsPortParserRuleCall_3_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.ComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponent_instanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeComponentCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeComponentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeComponentCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cUnboundedAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final Keyword cUnboundedAsteriskKeyword_3_1_0_0 = (Keyword)cUnboundedAssignment_3_1_0.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_3_1_1_0 = (RuleCall)cLowerBoundAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Assignment cLowerBoundAssignment_3_1_2_0 = (Assignment)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_3_1_2_0_0 = (RuleCall)cLowerBoundAssignment_3_1_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Alternatives cAlternatives_3_1_2_2 = (Alternatives)cGroup_3_1_2.eContents().get(2);
		private final Assignment cUnboundedAssignment_3_1_2_2_0 = (Assignment)cAlternatives_3_1_2_2.eContents().get(0);
		private final Keyword cUnboundedAsteriskKeyword_3_1_2_2_0_0 = (Keyword)cUnboundedAssignment_3_1_2_2_0.eContents().get(0);
		private final Assignment cUpperBoundAssignment_3_1_2_2_1 = (Assignment)cAlternatives_3_1_2_2.eContents().get(1);
		private final RuleCall cUpperBoundINTTerminalRuleCall_3_1_2_2_1_0 = (RuleCall)cUpperBoundAssignment_3_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentInstance:
		//    'component_instance'
		//    type=[Component|QualifiedName] name=ID
		//    ('[' (unbounded?='*' | lowerBound=INT | (lowerBound=INT '..' (unbounded?='*' | upperBound=INT))) ']')?
		//    (description=STRING)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'component_instance'
		//type=[Component|QualifiedName] name=ID
		//('[' (unbounded?='*' | lowerBound=INT | (lowerBound=INT '..' (unbounded?='*' | upperBound=INT))) ']')?
		//(description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'component_instance'
		public Keyword getComponent_instanceKeyword_0() { return cComponent_instanceKeyword_0; }
		
		//type=[Component|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Component|QualifiedName]
		public CrossReference getTypeComponentCrossReference_1_0() { return cTypeComponentCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeComponentQualifiedNameParserRuleCall_1_0_1() { return cTypeComponentQualifiedNameParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' (unbounded?='*' | lowerBound=INT | (lowerBound=INT '..' (unbounded?='*' | upperBound=INT))) ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//(unbounded?='*' | lowerBound=INT | (lowerBound=INT '..' (unbounded?='*' | upperBound=INT)))
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_3_1_0() { return cUnboundedAssignment_3_1_0; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_3_1_0_0() { return cUnboundedAsteriskKeyword_3_1_0_0; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_3_1_1() { return cLowerBoundAssignment_3_1_1; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_3_1_1_0() { return cLowerBoundINTTerminalRuleCall_3_1_1_0; }
		
		//(lowerBound=INT '..' (unbounded?='*' | upperBound=INT))
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_3_1_2_0() { return cLowerBoundAssignment_3_1_2_0; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_3_1_2_0_0() { return cLowerBoundINTTerminalRuleCall_3_1_2_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_3_1_2_1() { return cFullStopFullStopKeyword_3_1_2_1; }
		
		//(unbounded?='*' | upperBound=INT)
		public Alternatives getAlternatives_3_1_2_2() { return cAlternatives_3_1_2_2; }
		
		//unbounded?='*'
		public Assignment getUnboundedAssignment_3_1_2_2_0() { return cUnboundedAssignment_3_1_2_2_0; }
		
		//'*'
		public Keyword getUnboundedAsteriskKeyword_3_1_2_2_0_0() { return cUnboundedAsteriskKeyword_3_1_2_2_0_0; }
		
		//upperBound=INT
		public Assignment getUpperBoundAssignment_3_1_2_2_1() { return cUpperBoundAssignment_3_1_2_2_1; }
		
		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_3_1_2_2_1_0() { return cUpperBoundINTTerminalRuleCall_3_1_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSelfKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Assignment cFromAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cFromComponentInstanceCrossReference_3_1_0 = (CrossReference)cFromAssignment_3_1.eContents().get(0);
		private final RuleCall cFromComponentInstanceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cFromComponentInstanceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cColonColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourcePortCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourcePortIDTerminalRuleCall_5_0_1 = (RuleCall)cSourcePortCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFullStopKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSourceAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSourcePortCrossReference_6_1_0 = (CrossReference)cSourceAssignment_6_1.eContents().get(0);
		private final RuleCall cSourcePortIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSourcePortCrossReference_6_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Keyword cSelfKeyword_8_0 = (Keyword)cAlternatives_8.eContents().get(0);
		private final Assignment cToAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final CrossReference cToComponentInstanceCrossReference_8_1_0 = (CrossReference)cToAssignment_8_1.eContents().get(0);
		private final RuleCall cToComponentInstanceQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cToComponentInstanceCrossReference_8_1_0.eContents().get(1);
		private final Keyword cColonColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDestinationAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cDestinationPortCrossReference_10_0 = (CrossReference)cDestinationAssignment_10.eContents().get(0);
		private final RuleCall cDestinationPortIDTerminalRuleCall_10_0_1 = (RuleCall)cDestinationPortCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cFullStopKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cDestinationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cDestinationPortCrossReference_11_1_0 = (CrossReference)cDestinationAssignment_11_1.eContents().get(0);
		private final RuleCall cDestinationPortIDTerminalRuleCall_11_1_0_1 = (RuleCall)cDestinationPortCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cUsingKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cStrategyAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final CrossReference cStrategyStrategyCrossReference_13_1_0 = (CrossReference)cStrategyAssignment_13_1.eContents().get(0);
		private final RuleCall cStrategyStrategyIDTerminalRuleCall_13_1_0_1 = (RuleCall)cStrategyStrategyCrossReference_13_1_0.eContents().get(1);
		private final Group cGroup_13_2 = (Group)cGroup_13.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_13_2_0 = (Keyword)cGroup_13_2.eContents().get(0);
		private final Assignment cValueAssignment_13_2_1 = (Assignment)cGroup_13_2.eContents().get(1);
		private final RuleCall cValuePropertyValueParserRuleCall_13_2_1_0 = (RuleCall)cValueAssignment_13_2_1.eContents().get(0);
		private final Group cGroup_13_2_2 = (Group)cGroup_13_2.eContents().get(2);
		private final Keyword cCommaKeyword_13_2_2_0 = (Keyword)cGroup_13_2_2.eContents().get(0);
		private final Assignment cValueAssignment_13_2_2_1 = (Assignment)cGroup_13_2_2.eContents().get(1);
		private final RuleCall cValuePropertyValueParserRuleCall_13_2_2_1_0 = (RuleCall)cValueAssignment_13_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2_3 = (Keyword)cGroup_13_2.eContents().get(3);
		private final Assignment cDescriptionAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_14_0 = (RuleCall)cDescriptionAssignment_14.eContents().get(0);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Connection:
		//    'connect' (name=ID)? '(' ('self' | from=[ComponentInstance|QualifiedName]) '::' source+=[Port] ('.' source+=[Port])* ','
		//    ('self' | to=[ComponentInstance|QualifiedName]) '::' destination+=[Port] ('.' destination+=[Port])* ')'
		//    ('using' strategy=[Strategy] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?)? (description=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'connect' (name=ID)? '(' ('self' | from=[ComponentInstance|QualifiedName]) '::' source+=[Port] ('.' source+=[Port])* ','
		//('self' | to=[ComponentInstance|QualifiedName]) '::' destination+=[Port] ('.' destination+=[Port])* ')'
		//('using' strategy=[Strategy] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?)? (description=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'connect'
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//(name=ID)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('self' | from=[ComponentInstance|QualifiedName])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'self'
		public Keyword getSelfKeyword_3_0() { return cSelfKeyword_3_0; }
		
		//from=[ComponentInstance|QualifiedName]
		public Assignment getFromAssignment_3_1() { return cFromAssignment_3_1; }
		
		//[ComponentInstance|QualifiedName]
		public CrossReference getFromComponentInstanceCrossReference_3_1_0() { return cFromComponentInstanceCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getFromComponentInstanceQualifiedNameParserRuleCall_3_1_0_1() { return cFromComponentInstanceQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_4() { return cColonColonKeyword_4; }
		
		//source+=[Port]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[Port]
		public CrossReference getSourcePortCrossReference_5_0() { return cSourcePortCrossReference_5_0; }
		
		//ID
		public RuleCall getSourcePortIDTerminalRuleCall_5_0_1() { return cSourcePortIDTerminalRuleCall_5_0_1; }
		
		//('.' source+=[Port])*
		public Group getGroup_6() { return cGroup_6; }
		
		//'.'
		public Keyword getFullStopKeyword_6_0() { return cFullStopKeyword_6_0; }
		
		//source+=[Port]
		public Assignment getSourceAssignment_6_1() { return cSourceAssignment_6_1; }
		
		//[Port]
		public CrossReference getSourcePortCrossReference_6_1_0() { return cSourcePortCrossReference_6_1_0; }
		
		//ID
		public RuleCall getSourcePortIDTerminalRuleCall_6_1_0_1() { return cSourcePortIDTerminalRuleCall_6_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//('self' | to=[ComponentInstance|QualifiedName])
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'self'
		public Keyword getSelfKeyword_8_0() { return cSelfKeyword_8_0; }
		
		//to=[ComponentInstance|QualifiedName]
		public Assignment getToAssignment_8_1() { return cToAssignment_8_1; }
		
		//[ComponentInstance|QualifiedName]
		public CrossReference getToComponentInstanceCrossReference_8_1_0() { return cToComponentInstanceCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getToComponentInstanceQualifiedNameParserRuleCall_8_1_0_1() { return cToComponentInstanceQualifiedNameParserRuleCall_8_1_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_9() { return cColonColonKeyword_9; }
		
		//destination+=[Port]
		public Assignment getDestinationAssignment_10() { return cDestinationAssignment_10; }
		
		//[Port]
		public CrossReference getDestinationPortCrossReference_10_0() { return cDestinationPortCrossReference_10_0; }
		
		//ID
		public RuleCall getDestinationPortIDTerminalRuleCall_10_0_1() { return cDestinationPortIDTerminalRuleCall_10_0_1; }
		
		//('.' destination+=[Port])*
		public Group getGroup_11() { return cGroup_11; }
		
		//'.'
		public Keyword getFullStopKeyword_11_0() { return cFullStopKeyword_11_0; }
		
		//destination+=[Port]
		public Assignment getDestinationAssignment_11_1() { return cDestinationAssignment_11_1; }
		
		//[Port]
		public CrossReference getDestinationPortCrossReference_11_1_0() { return cDestinationPortCrossReference_11_1_0; }
		
		//ID
		public RuleCall getDestinationPortIDTerminalRuleCall_11_1_0_1() { return cDestinationPortIDTerminalRuleCall_11_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
		
		//('using' strategy=[Strategy] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'using'
		public Keyword getUsingKeyword_13_0() { return cUsingKeyword_13_0; }
		
		//strategy=[Strategy]
		public Assignment getStrategyAssignment_13_1() { return cStrategyAssignment_13_1; }
		
		//[Strategy]
		public CrossReference getStrategyStrategyCrossReference_13_1_0() { return cStrategyStrategyCrossReference_13_1_0; }
		
		//ID
		public RuleCall getStrategyStrategyIDTerminalRuleCall_13_1_0_1() { return cStrategyStrategyIDTerminalRuleCall_13_1_0_1; }
		
		//('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?
		public Group getGroup_13_2() { return cGroup_13_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_2_0() { return cLeftParenthesisKeyword_13_2_0; }
		
		//value+=PropertyValue
		public Assignment getValueAssignment_13_2_1() { return cValueAssignment_13_2_1; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_13_2_1_0() { return cValuePropertyValueParserRuleCall_13_2_1_0; }
		
		//(',' value+=PropertyValue)*
		public Group getGroup_13_2_2() { return cGroup_13_2_2; }
		
		//','
		public Keyword getCommaKeyword_13_2_2_0() { return cCommaKeyword_13_2_2_0; }
		
		//value+=PropertyValue
		public Assignment getValueAssignment_13_2_2_1() { return cValueAssignment_13_2_2_1; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_13_2_2_1_0() { return cValuePropertyValueParserRuleCall_13_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_2_3() { return cRightParenthesisKeyword_13_2_3; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_14() { return cDescriptionAssignment_14; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_14_0() { return cDescriptionSTRINGTerminalRuleCall_14_0; }
		
		//';'
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}
	public class DeploymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Deployment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeploymentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cContainermappingAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cContainermappingContainerMappingParserRuleCall_3_0_0 = (RuleCall)cContainermappingAssignment_3_0.eContents().get(0);
		private final Assignment cConnectionmappingAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cConnectionmappingConnectionMappingParserRuleCall_3_1_0 = (RuleCall)cConnectionmappingAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Deployment:
		//    'deployment' name=ID (description=STRING)?
		//    (containermapping+=ContainerMapping | connectionmapping+=ConnectionMapping)*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'deployment' name=ID (description=STRING)?
		//(containermapping+=ContainerMapping | connectionmapping+=ConnectionMapping)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'deployment'
		public Keyword getDeploymentKeyword_0() { return cDeploymentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(containermapping+=ContainerMapping | connectionmapping+=ConnectionMapping)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//containermapping+=ContainerMapping
		public Assignment getContainermappingAssignment_3_0() { return cContainermappingAssignment_3_0; }
		
		//ContainerMapping
		public RuleCall getContainermappingContainerMappingParserRuleCall_3_0_0() { return cContainermappingContainerMappingParserRuleCall_3_0_0; }
		
		//connectionmapping+=ConnectionMapping
		public Assignment getConnectionmappingAssignment_3_1() { return cConnectionmappingAssignment_3_1; }
		
		//ConnectionMapping
		public RuleCall getConnectionmappingConnectionMappingParserRuleCall_3_1_0() { return cConnectionmappingConnectionMappingParserRuleCall_3_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class ContainerMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.ContainerMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcessorProcessorCrossReference_0_0 = (CrossReference)cProcessorAssignment_0.eContents().get(0);
		private final RuleCall cProcessorProcessorQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cProcessorProcessorCrossReference_0_0.eContents().get(1);
		private final Keyword cHostsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContainerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContainerContainerCrossReference_2_0 = (CrossReference)cContainerAssignment_2.eContents().get(0);
		private final RuleCall cContainerContainerQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cContainerContainerCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContainerMapping:
		//    processor=[Processor|QualifiedName]
		//    'hosts' container=[Container|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//processor=[Processor|QualifiedName]
		//'hosts' container=[Container|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//processor=[Processor|QualifiedName]
		public Assignment getProcessorAssignment_0() { return cProcessorAssignment_0; }
		
		//[Processor|QualifiedName]
		public CrossReference getProcessorProcessorCrossReference_0_0() { return cProcessorProcessorCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getProcessorProcessorQualifiedNameParserRuleCall_0_0_1() { return cProcessorProcessorQualifiedNameParserRuleCall_0_0_1; }
		
		//'hosts'
		public Keyword getHostsKeyword_1() { return cHostsKeyword_1; }
		
		//container=[Container|QualifiedName]
		public Assignment getContainerAssignment_2() { return cContainerAssignment_2; }
		
		//[Container|QualifiedName]
		public CrossReference getContainerContainerCrossReference_2_0() { return cContainerContainerCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getContainerContainerQualifiedNameParserRuleCall_2_0_1() { return cContainerContainerQualifiedNameParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConnectionMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.ConnectionMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLinkLinkCrossReference_0_0 = (CrossReference)cLinkAssignment_0.eContents().get(0);
		private final RuleCall cLinkLinkQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cLinkLinkCrossReference_0_0.eContents().get(1);
		private final Keyword cCarriesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConnectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConnectionConnectionCrossReference_2_0 = (CrossReference)cConnectionAssignment_2.eContents().get(0);
		private final RuleCall cConnectionConnectionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConnectionConnectionCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConnectionMapping:
		//    link=[Link|QualifiedName]
		//    'carries' connection=[Connection|QualifiedName] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//link=[Link|QualifiedName]
		//'carries' connection=[Connection|QualifiedName] ';'
		public Group getGroup() { return cGroup; }
		
		//link=[Link|QualifiedName]
		public Assignment getLinkAssignment_0() { return cLinkAssignment_0; }
		
		//[Link|QualifiedName]
		public CrossReference getLinkLinkCrossReference_0_0() { return cLinkLinkCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getLinkLinkQualifiedNameParserRuleCall_0_0_1() { return cLinkLinkQualifiedNameParserRuleCall_0_0_1; }
		
		//'carries'
		public Keyword getCarriesKeyword_1() { return cCarriesKeyword_1; }
		
		//connection=[Connection|QualifiedName]
		public Assignment getConnectionAssignment_2() { return cConnectionAssignment_2; }
		
		//[Connection|QualifiedName]
		public CrossReference getConnectionConnectionCrossReference_2_0() { return cConnectionConnectionCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getConnectionConnectionQualifiedNameParserRuleCall_2_0_1() { return cConnectionConnectionQualifiedNameParserRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.Strategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Strategy:
		//    'strategy' name=ID (description=STRING)? (properties+=Property)* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'strategy' name=ID (description=STRING)? (properties+=Property)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'strategy'
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description=STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final PackageElements pPackage;
	private final QualifiedNameElements pQualifiedName;
	private final PackageableElementElements pPackageableElement;
	private final UnitElements pUnit;
	private final TypeElements pType;
	private final PrimitiveElements pPrimitive;
	private final RealElements pReal;
	private final TerminalRule tEXP;
	private final InterfaceElements pInterface;
	private final EnumerationElements pEnumeration;
	private final TopicElements pTopic;
	private final AliasElements pAlias;
	private final PortElements pPort;
	private final EnumeratorElements pEnumerator;
	private final AttributeElements pAttribute;
	private final TopicPortElements pTopicPort;
	private final InterfacePortElements pInterfacePort;
	private final PlatformElements pPlatform;
	private final ProcessorElements pProcessor;
	private final LinkElements pLink;
	private final PropertyElements pProperty;
	private final PropertyValueElements pPropertyValue;
	private final TransportElements pTransport;
	private final ApplicationElements pApplication;
	private final ContainerElements pContainer;
	private final ContainerInstanceElements pContainerInstance;
	private final ComponentElements pComponent;
	private final ComponentInstanceElements pComponentInstance;
	private final ConnectionElements pConnection;
	private final DeploymentElements pDeployment;
	private final ContainerMappingElements pContainerMapping;
	private final ConnectionMappingElements pConnectionMapping;
	private final StrategyElements pStrategy;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SADLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackage = new PackageElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPackageableElement = new PackageableElementElements();
		this.pUnit = new UnitElements();
		this.pType = new TypeElements();
		this.pPrimitive = new PrimitiveElements();
		this.pReal = new RealElements();
		this.tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.lsaf.sadl.SADL.EXP");
		this.pInterface = new InterfaceElements();
		this.pEnumeration = new EnumerationElements();
		this.pTopic = new TopicElements();
		this.pAlias = new AliasElements();
		this.pPort = new PortElements();
		this.pEnumerator = new EnumeratorElements();
		this.pAttribute = new AttributeElements();
		this.pTopicPort = new TopicPortElements();
		this.pInterfacePort = new InterfacePortElements();
		this.pPlatform = new PlatformElements();
		this.pProcessor = new ProcessorElements();
		this.pLink = new LinkElements();
		this.pProperty = new PropertyElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pTransport = new TransportElements();
		this.pApplication = new ApplicationElements();
		this.pContainer = new ContainerElements();
		this.pContainerInstance = new ContainerInstanceElements();
		this.pComponent = new ComponentElements();
		this.pComponentInstance = new ComponentInstanceElements();
		this.pConnection = new ConnectionElements();
		this.pDeployment = new DeploymentElements();
		this.pContainerMapping = new ContainerMappingElements();
		this.pConnectionMapping = new ConnectionMappingElements();
		this.pStrategy = new StrategyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.leonardo.lsaf.sadl.SADL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    {Model} package+=(Package)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Package:
	//    'package' name=QualifiedName
	//    (description=STRING)?
	//    (contents+=PackageableElement)*
	//    'end';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//QualifiedName hidden():
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PackageableElement:
	//    Unit | Type | Component | Interface | Platform |
	//    Application | Transport | Strategy | Deployment | Container;
	public PackageableElementElements getPackageableElementAccess() {
		return pPackageableElement;
	}
	
	public ParserRule getPackageableElementRule() {
		return getPackageableElementAccess().getRule();
	}
	
	//Unit:
	//    'unit' name=ID (':' group=[Unit|QualifiedName])? (description=STRING)? ';';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Type:
	//    Primitive | Enumeration | Topic | Alias;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Primitive:
	//    'primitive' name=ID (min=Real ->max=Real (':' res=Real)?)?';';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Real returns ecore::EDouble hidden():
	//    ('-')? INT '.' (EXP | INT);
	public RealElements getRealAccess() {
		return pReal;
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}
	
	//terminal EXP:
	//    INT 'E' ('+' | '-') INT;
	public TerminalRule getEXPRule() {
		return tEXP;
	}
	
	//Interface:
	//    'interface' name=ID
	//    (description=STRING)?
	//    (ports+=Port)*
	//    'end';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}
	
	//Enumeration:
	//    'enum' name=ID
	//    (description=STRING)?
	//    (enumerators+=Enumerator)*
	//    'end';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Topic:
	//    'topic' name=ID
	//    (description=STRING)?
	//    (attributes+=Attribute)*
	//    'end';
	public TopicElements getTopicAccess() {
		return pTopic;
	}
	
	public ParserRule getTopicRule() {
		return getTopicAccess().getRule();
	}
	
	//Alias:
	//    'alias' type=[Type|QualifiedName] (min=Real ->max=Real (':' res=Real)?)? ('[' unbounded='*' | upperbound=INT ']')? (
	//    '(' unit=[Unit|QualifiedName] ')')? 'as' name=ID (description=STRING)? ';';
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//Port:
	//    TopicPort | InterfacePort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Enumerator:
	//    ('value' | deprecated?='deprecated') name=ID ('=' value=INT)? (description=STRING)? ';';
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//Attribute:
	//    ('attribute' | deprecated?='deprecated') type=[Type|QualifiedName] name=ID ('[' unbounded?='*' | lowerbound=INT |
	//    (lowerbound=INT '..' (unbounded?='*' | upperbound=INT))']')? ('(' unit=[Unit|QualifiedName] ')')?
	//    (description=STRING)? ';';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//TopicPort:
	//    'port' name=ID (conjugated?='receives' | 'sends') type=[Topic|QualifiedName] ';';
	public TopicPortElements getTopicPortAccess() {
		return pTopicPort;
	}
	
	public ParserRule getTopicPortRule() {
		return getTopicPortAccess().getRule();
	}
	
	//InterfacePort:
	//    'port' name=ID (conjugated?='requires' | 'provides') type=[Interface|QualifiedName] ';';
	public InterfacePortElements getInterfacePortAccess() {
		return pInterfacePort;
	}
	
	public ParserRule getInterfacePortRule() {
		return getInterfacePortAccess().getRule();
	}
	
	//Platform:
	//    'platform' name=ID (description=STRING)?
	//    (processors+=Processor | links+=Link)*
	//    'end';
	public PlatformElements getPlatformAccess() {
		return pPlatform;
	}
	
	public ParserRule getPlatformRule() {
		return getPlatformAccess().getRule();
	}
	
	//Processor:
	//    'processor' name=ID (description=STRING)? ';';
	public ProcessorElements getProcessorAccess() {
		return pProcessor;
	}
	
	public ParserRule getProcessorRule() {
		return getProcessorAccess().getRule();
	}
	
	//Link:
	//    'link' name=ID (description=STRING)?
	//    ('connects' '(' processors+=[Processor|QualifiedName] (',' processors+=[Processor|QualifiedName])* ')' ';')?
	//    ('over' transport=[Transport] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')? ';')?
	//    'end';
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Property:
	//    'property' name=ID (optional?='?')? (description=STRING)? ';';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//PropertyValue:
	//    property=[Property] '=' value=STRING;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//Transport:
	//    'transport' name=ID (description=STRING)? (properties+=Property)* 'end';
	public TransportElements getTransportAccess() {
		return pTransport;
	}
	
	public ParserRule getTransportRule() {
		return getTransportAccess().getRule();
	}
	
	//Application:
	//    'application' name=ID (description=STRING)?
	//    (containerInstances+=ContainerInstance)*
	//    'end';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Container:
	//    'container' name=ID (description=STRING)?
	//    (componentInstances+=ComponentInstance | connections+=Connection | containerInstances+=ContainerInstance)*
	//    'end';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//ContainerInstance:
	//    'container_instance'
	//    type=[Container|QualifiedName] name=ID
	//    (description=STRING)? ';';
	public ContainerInstanceElements getContainerInstanceAccess() {
		return pContainerInstance;
	}
	
	public ParserRule getContainerInstanceRule() {
		return getContainerInstanceAccess().getRule();
	}
	
	//Component:
	//    'component' name=ID
	//    (description=STRING)?
	//    (parts+=ComponentInstance | ports+=Port)*
	//    'end';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//ComponentInstance:
	//    'component_instance'
	//    type=[Component|QualifiedName] name=ID
	//    ('[' (unbounded?='*' | lowerBound=INT | (lowerBound=INT '..' (unbounded?='*' | upperBound=INT))) ']')?
	//    (description=STRING)? ';';
	public ComponentInstanceElements getComponentInstanceAccess() {
		return pComponentInstance;
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}
	
	//Connection:
	//    'connect' (name=ID)? '(' ('self' | from=[ComponentInstance|QualifiedName]) '::' source+=[Port] ('.' source+=[Port])* ','
	//    ('self' | to=[ComponentInstance|QualifiedName]) '::' destination+=[Port] ('.' destination+=[Port])* ')'
	//    ('using' strategy=[Strategy] ('(' value+=PropertyValue (',' value+=PropertyValue)* ')')?)? (description=STRING)? ';'
	//;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//Deployment:
	//    'deployment' name=ID (description=STRING)?
	//    (containermapping+=ContainerMapping | connectionmapping+=ConnectionMapping)*
	//    'end';
	public DeploymentElements getDeploymentAccess() {
		return pDeployment;
	}
	
	public ParserRule getDeploymentRule() {
		return getDeploymentAccess().getRule();
	}
	
	//ContainerMapping:
	//    processor=[Processor|QualifiedName]
	//    'hosts' container=[Container|QualifiedName] ';';
	public ContainerMappingElements getContainerMappingAccess() {
		return pContainerMapping;
	}
	
	public ParserRule getContainerMappingRule() {
		return getContainerMappingAccess().getRule();
	}
	
	//ConnectionMapping:
	//    link=[Link|QualifiedName]
	//    'carries' connection=[Connection|QualifiedName] ';';
	public ConnectionMappingElements getConnectionMappingAccess() {
		return pConnectionMapping;
	}
	
	public ParserRule getConnectionMappingRule() {
		return getConnectionMappingAccess().getRule();
	}
	
	//Strategy:
	//    'strategy' name=ID (description=STRING)? (properties+=Property)* 'end';
	public StrategyElements getStrategyAccess() {
		return pStrategy;
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
